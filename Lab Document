ECE 487/587 Spring 2020
Laboratory 5 and 6 (Combined) – Introduction to Polling Applications, Direct Port Manipulation, and Interrupt-Driven Systems

1.	Introduction
This particular laboratory exercise is designed to introduce students to polling applications using the analog-to-digital converters; bit-level, register manipulation of a peripheral; and interrupt-driven systems.

2.	Requirements
In addition to your Arduino platform and computer, you will also need the following for this lab:
•	Solderless breadboard
•	10k ohm potentiometer (other values can also work)
•	Wires for use with breadboard

3.	Laboratory Tasks
You are to create a new application that will execute on your Arduino platform.  Your application will repeatedly convert an analog voltage connected to analog pin A0 to its corresponding digital value.  Your code will perform the analog-to-digital conversions in three different ways: option ‘a’ will use the AnalogRead function (lab #4); for option ‘b’ your code is required to perform the conversion using bit-level register manipulation to control the ADCs using polling (lab #5); for option ‘c’ your code is required to be interrupt-driven using direct port manipulation (bit-level, register control).  That is, when the ADC completes a conversion, it should generate an interrupt which you should handle appropriately.  The time required for each conversion (in microseconds) and the resulting digital value (in hexadecimal) must be displayed to the screen in table format using the serial monitor as described below.  

The analog signal to be converted is a voltage from 0 to +5V that is adjustable via the potentiometer. Be careful with analog values > 5.0 V as they can damage the ADC.  

Upon power up or reset, your code will start by displaying a reset message. Then, it will start by displaying a prompt to the screen asking the user for option ‘a’ to start a set of conversions using the Lab #4 AnalogRead function; option ‘b’ to start conversions using direct port manipulation and polling of the ADCs; or option ‘c’ to start a set of conversions using direct port manipulation and an interrupt-driven approach.  When the user enters a valid option, your program should display a message to the screen that a series of 30 measurements is about to begin using the selected option.  Your code should then convert the analog input 30 times (make sure you are waiting long enough between conversions) using the conversion option selected by the user.  For each conversion, your code should display the number of the conversion, the resulting digital value (in hexadecimal), and the required conversion time (in microseconds).  After the 30th conversion is complete, the average time required for the 30 conversions should be displayed and the program should prompt the user to begin another set of conversions. Your code for option ‘a’ is required to perform the conversions using the AnalogRead function. Your code for option ‘b’ is required to poll the completion of each conversion using a polling loop with the best possible response time.  Your code for option ‘c’ is required to be interrupt-driven via direct port manipulation and good programming practices for interrupt service routines should be followed.  

The only valid user input at the prompt is ‘a’, ‘b’, or ‘c’.  All other user inputs are considered invalid and should be accounted for appropriately.  All user inputs entered during a set of conversions should be ignored (i.e. the program should NOT respond to any of these inputs).

All user inputs (valid and invalid) should reset the watchdog timer.  If the user does not provide any inputs within 4 seconds of the prompt, the watchdog timer should expire and the board should reset.  The timeout period should begin upon prompt to the user for input.  Students are required to use the hardware watchdog timer for this assignment. 

One of the goals of this assignment is to compare options ‘b’ and ‘c’ conversion times against those found using the AnalogRead function in option ‘a’.  While the AnalogRead function provides users with convenience, it is slow and is therefore not necessarily useful for real-time applications with hard deadlines.  

Notes:
1) Your lab doesn’t have a legitimate foreground application to execute. So, you will not get the “concurrency” benefits that interrupt-driven systems typically offer. 

2) AnalogRead includes the reading of the converted data. So, make sure you are timing the reading of the data for options ‘b’ and ‘c’ as well to make sure that you are comparing apples to apples. This applies to both the polling and interrupt-driven options. 

Required for 587/No Extra credit for 487
The program should maintain running statistics of the number of conversions of each type performed and the average times seen for each conversion method since the last board reset.  That is, after each set of conversions is completed, the average conversion times for all conversions for each option are printed to the screen using the serial monitor.

You must also build an additional circuit on your breadboard displaying a 4 second countdown of the watchdog timer.  The countdown display has 1 second resolution and should start at 4 seconds each time the watchdog timer is reset and should stop at 0 seconds when the watchdog expires (before board reset).  

Sample program output:
Board was reset
Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters ‘a’)
Starting a set of conversions using AnalogRead:
#1:  	digital value = 3FF   	Time = 120 usecs
#2:  	digital value = 3A0  	Time = 118 usecs	(all user inputs during conversion 
…							sequence are ignored)
#30: 	digital value = 000	Time = 120 usecs

AnalogRead avg conversion time = 120.00 usecs

TOTALS: (this is the 587-only stuff)
AnalogRead avg conversion time = 120.00 usecs (30 total conversions)
Polling avg conversion time = NA (0 total conversions)
Interrupt-driven avg conversion time = NA (0 total conversions)

Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters ‘b’)
Starting a set of conversions using polling and port manipulation:
#1:  	digital value = 3FF   	Time = 112 usecs
#2:  	digital value = 3A0  	Time = 108 usecs	(all user inputs during conversion
…							sequence are ignored)
#30: 	digital value = 000	Time = 104 usecs
 
Polling avg conversion time = 109.00 usecs

TOTALS: (this is the 587-only stuff)
AnalogRead avg conversion time = 120.00 usecs (30 total conversions)
Polling avg conversion time = 109.00 usecs (30 total conversions)
Interrupt-driven avg conversion time = NA (0 total conversions)
Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters ‘c’)
Starting a set of conversions using interrupts:
#1:  	digital value = 3FF   	Time = 120 usecs
#2:  	digital value = 3A0  	Time = 116 usecs	(all user inputs during conversion
…							sequence are ignored)
#30: 	digital value = 000	Time = 120 usecs

Interrupt-driven avg conversion time = 116.00 usecs

TOTALS: (this is the 587-only stuff)
AnalogRead avg conversion time = 120.00 usecs (30 total conversions)
Polling avg conversion time = 109.00 usecs (30 total conversions)
Interrupt-driven avg conversion time = 116.00 usecs (30 total conversions)

Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters ‘c’)
Starting a set of conversions using interrupts:
#1:  	digital value = 3FF   	Time = 120 usecs
#2:  	digital value = 3A0  	Time = 116 usecs	(all user inputs during conversion
…							sequence are ignored)
#30: 	digital value = 000	Time = 120 usecs

Interrupt-driven avg conversion time = 118.00 usecs 

TOTALS: (this is 587-only stuff)
AnalogRead avg conversion time = 120.00 usecs (30 total conversions)
Polling avg conversion time = 109.00 usecs (30 total conversions)
Interrupt-driven avg conversion time = 117.00 usecs (60 total conversions)

Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters nothing for > 4 seconds)

Board was reset

Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) > (user enters ‘c’)
Starting a set of conversions using interrupts:
#1:  	digital value = 3FF   	Time = 120 usecs
#2:  	digital value = 3A0  	Time = 116 usecs	(all user inputs during conversion
…							sequence are ignored)
#30: 	digital value = 000	Time = 120 usecs

Interrupt-driven avg conversion time = 118.00 usecs 

TOTALS: (this is 587-only stuff)
AnalogRead avg conversion time = NA (0 total conversions)
Polling avg conversion time = NA (0 total conversions)
Interrupt-driven avg conversion time = 118.00 usecs (30 total conversions)

Select a type of conversion to perform (‘a’ for AnalogRead; ‘b’ for polling; ‘c’ for interrupts) >

4.	Grading
Due Date:  03/27/2020
No late assignments will be accepted.  This is an individual assignment.

All students must demo/explain their project in the lab (SERC 2005) to the TA, Ben Sawyer, by the deadline.  The assignment will be graded at the time of the demo.  There will be no re-submissions (for each lab attempt), so all debugging is the responsibility of the student (the TA doesn’t have time to help you debug your code!).  Each student will have to sign up for a grading/demo time, and the assigned time is the grading/demo time! No exceptions. Arrive a few minutes early to get set up and get ready for your demo time to begin. We want to stay on schedule, so be ready to go when your time starts. If you miss your demo time, you will receive a grade of zero for the lab attempt, and you will have to resubmit. The signup sheet will be posted in SERC 2005 the week before the lab is due. The TA will schedule all grading activities according to the signup sheet. The TA is not able to schedule independent times outside of those posted on the signup sheet. 

You must turn in a hardcopy of your program during your demo with the grading sheet attached as page 1.  The hardcopy of your code should match the code that is being executed!  If it does not match, your grade for the lab will be zero.  Your code should have a header comment indicating your name, CWID, lab assignment, and other pertinent info. I encourage you to print your code to preserve your formatting, which will be considered as part of the “programming practices” grade.  

I encourage all students to PLAN AHEAD regarding deadlines.  Deadlines are LIMITS not GOALS! All students should plan to get their assignments done with time to spare to avoid missing the deadline and to get a demo time.  You may need to be flexible when trying to get a demo time. Deadlines are judged based upon when the assignment is demoed (i.e. graded), not when a student says he/she is finished.  If the assignment is not graded by the deadline, it will not be accepted and the student will receive a zero for that lab attempt.  

Grading Guidelines that will be used for Lab #5/#6:
Grade Breakdown:
30 pts – Good programming practice
-	Comments
-	Indentation
-	Good/meaningful variable names
-	Minimum/wise usage of global variables; unnecessary use of variables
-	Inefficient code

170 pts – Functionality/description of hardware and code (for all user input options)
-	Correct timing of operations
-	Structure of polling loop (minimum response time) for option ‘b’
-	Structure of the ISR for option ‘c’
-	Operation of potentiometer (full range of digital values are reported)
-	Formatted output to the screen
-	Use of required techniques for each user input option
-	Student’s understanding of his/her code and circuit as assessed by the TA during the demo
-	Error checking user input
-	Timeout of 4 seconds with no user input from time of prompt

50 pts – REQUIRED FOR ECE 587 STUDENTS/No extra credit for ECE 487 students
-	Code should maintain cumulative stats between board resets (as described above). 

50 pts – REQUIRED FOR ECE 587 STUDENTS/Extra credit for ECE 487 students
-	7-segment countdown indicator
 
